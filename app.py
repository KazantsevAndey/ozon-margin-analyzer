import streamlit as st
import pandas as pd
from ozon_core_cleaned_fixed import calculate_all
import matplotlib.pyplot as plt
from openai import OpenAI
import streamlit as st
import openai
import io

openai.api_key = st.secrets["OPENAI_API_KEY"]

st.set_page_config(page_title="Ozon Margin Analyzer", layout="wide")
st.title("üßæ Ozon Margin Analyzer")
st.subheader("üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏")

# –í–≤–æ–¥ –∫–ª—é—á–µ–π
with st.sidebar:
    st.markdown("üîê **API-–∫–ª—é—á–∏ Ozon**")
    api_key = st.text_input("API –∫–ª—é—á Ozon", type="password")
    perf_key = st.text_input("API –∫–ª—é—á Performance API", type="password")
    client_id = st.text_input("Client ID (Seller ID)", type="default")
    perf_client_id = st.text_input("Performance Client ID")
    st.markdown("–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Å—Å–∏–∏ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.")

# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –ø—Ä–∞–π—Å–∞
st.markdown("### üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é")
upload_method = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", ["–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é"])

price = None

if upload_method == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º", type="xlsx")
    if uploaded_file is not None:
        try:
            price = pd.read_excel(uploaded_file)
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            st.dataframe(price)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞: {e}")
else:
    st.info("‚ö†Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Excel.")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
if st.button("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å (—ç—Ç–∞–ø 2)"):
    if not api_key or not perf_key or not client_id or price is None:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–∞–π—Å.")
    else:
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç..."):
            try:
                results = calculate_all(api_key, perf_key, perf_client_id, price, client_id)
                st.session_state.results = results
                st.success("–†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                st.markdown("### ‚¨áÔ∏è –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ Excel-–æ—Ç—á—ë—Ç—ã")
                st.download_button("üì• –û—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É", data=results["buffer_account"].getvalue(), file_name="account_summary.xlsx")
                st.download_button("üì• –û—Ç—á—ë—Ç –ø–æ SKU (—é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞)", data=results["buffer_sku"].getvalue(), file_name="sku_unit_economics.xlsx")
                st.markdown("### ‚¨áÔ∏è –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ Excel-–æ—Ç—á—ë—Ç—ã")
                st.download_button("üì• –û—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É", data=results["üìÑ –ë—É—Ñ–µ—Ä –æ—Ç—á—ë—Ç–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É"].getvalue(), file_name="account_summary.xlsx")
                st.download_button("üì• –û—Ç—á—ë—Ç –ø–æ SKU (—é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞)", data=results["üìÑ –ë—É—Ñ–µ—Ä –æ—Ç—á—ë—Ç–∞ –ø–æ SKU"].getvalue(), file_name="sku_unit_economics.xlsx")

                # –û—Ç–¥–µ–ª—å–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã
                for name, value in results.items():
                    st.subheader(f"{name}")
                    if isinstance(value, plt.Figure):
                        st.pyplot(value)
                    else:
                        st.dataframe(value, use_container_width=True)

            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


    # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel-–æ—Ç—á—ë—Ç–æ–≤
#st.markdown("### ‚¨áÔ∏è –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ Excel-–æ—Ç—á—ë—Ç—ã")
#st.download_button("üì• –û—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É", data=results["buffer_account"].getvalue(), file_name="account_summary.xlsx")
#st.download_button("üì• –û—Ç—á—ë—Ç –ø–æ SKU (—é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞)", data=results["buffer_sku"].getvalue(), file_name="sku_unit_economics.xlsx")
# GPT-–∞–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É
if st.button("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É"):
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É..."):
        try:
            prompt_account = (
                "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç—á—ë—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É. –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞—Ç—Ä–∞—Ç, —Ç—Ä–µ–Ω–¥ –ø–æ –º–∞—Ä–∂–µ, "
                "–∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                f"–ò—Ç–æ–≥–∏ –≤—á–µ—Ä–∞: {results['üìä –ò—Ç–æ–≥–∏ (–≤—á–µ—Ä–∞)']}\n"
                f"–ò—Ç–æ–≥–∏ –º–µ—Å—è—Ü: {results['üìä –ò—Ç–æ–≥–∏ (–º–µ—Å—è—Ü)']}\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –≤—á–µ—Ä–∞:\n{nachislen_yesterday.head(10).to_string(index=False)}\n"
                f"–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Å—è—Ü:\n{nachislen_month.head(10).to_string(index=False)}"
            )
            response = openai.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt_account}],
                temperature=0.3,
                max_tokens=1000
            )
            st.subheader("üìã –ê–Ω–∞–ª–∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
            st.write(response.choices[0].message.content)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

# GPT-–∞–Ω–∞–ª–∏–∑ SKU
# GPT-–∞–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É

       
#if st.button("üß† –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò"):
#    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç—ã..."):
#        try:
#            full_report = ""
#            for name, table in st.session_state.results.items():
#                if isinstance(table, pd.DataFrame):
#                    full_report += f"\n\n{name}:\n{table.head(20).to_string(index=False)}"
#                elif isinstance(table, dict):
#                    for k, v in table.items():
#                        full_report += f"\n\n{name} ‚Äì {k}: {v}"
#                else:
#                    full_report += f"\n\n{name}: {table}"

#            prompt = (
#    "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç—á—ë—Ç—ã –æ –ø—Ä–æ–¥–∞–∂–∞—Ö. "
#    "–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–≥–∏–∫–µ:\n"
#    "1. –°—Ä–∞–≤–Ω–∏ –æ–±—â—É—é –º–∞—Ä–∂—É –∑–∞ –≤—á–µ—Ä–∞ –∏ –∑–∞ –º–µ—Å—è—Ü. –°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥: —Ä–∞—Å—Ç—ë—Ç, –ø–∞–¥–∞–µ—Ç –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞.\n"
#    "2. –û–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞ —á—Ç–æ –∏–¥—É—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã. –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –≥–¥–µ —Ç—Ä–∞—Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≤–µ–ª–∏–∫–∏.\n"
#    "3. –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Ä–∂–∞ –∑–∞ –º–µ—Å—è—Ü –∏–ª–∏ –≤—á–µ—Ä–∞ –Ω–∏–∂–µ 15%. –£–∫–∞–∂–∏ –∏—Ö SKU –∏ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n"
#    "4. –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã—Å–æ–∫–∞—è –±–∞–∑–æ–≤–∞—è –º–∞—Ä–∂–∞, –Ω–æ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç –ø—Ä–∏–±—ã–ª—å –º–∏–Ω–∏–º–∞–ª—å–Ω–∞ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞.\n"
#    "5. –í –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ‚Äî —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏—Ç–æ–≥: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Ä–∂–∏, –Ω–∞ –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –∏ —Å—Ç–∞—Ç—å–∏ –∑–∞—Ç—Ä–∞—Ç —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.\n"
#    "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ –ø—É–Ω–∫—Ç–∞–º, —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏.\n\n"
#    f"{full_report}"
#)
#
#            client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
#            response = client.chat.completions.create(
#                model="gpt-4",
#                messages=[{"role": "user", "content": prompt}],
#                temperature=0.3,
#                max_tokens=1000
#            )
#
#            st.subheader("üìã GPT-–∞–Ω–∞–ª–∏–∑ –æ—Ç—á—ë—Ç–æ–≤")
#            st.write(response.choices[0].message.content)
#
#        except Exception as e:
#            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
