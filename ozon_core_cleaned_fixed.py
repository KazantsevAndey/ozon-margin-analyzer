def calculate_all(api_key, perf_key, perf_client_id, price, client_id):  
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    from datetime import datetime, timedelta
    import requests
    import io

 
    """–ó–∞–≥—Ä—É–∑–∏–ª–∏ –ø—Ä–∞–π—Å —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏–ª–∏ –≤–∑—è–ª–∏ –µ–≥–æ —Å –≥—É–≥–ª –¥–∏—Å–∫–∞."""
    
    #price.head()
    
    url_create = "https://api-seller.ozon.ru/v1/report/create"
    
    headers = {
        "Client-Id": client_id,
        "Api-Key": api_key,
        "Content-Type": "application/json"
    }
    url = "https://api-seller.ozon.ru/v3/finance/transaction/list"
    
    def fetch_transactions_and_show_nachislen(start_date, end_date, period_name):
        payload = {
            "filter": {
                "date": {"from": start_date, "to": end_date},
                "operation_type": [],
                "posting_number": "",
                "transaction_type": "all"
            },
            "page": 1,
            "page_size": 1000
        }
    
        all_transactions = []
        while True:
            response = requests.post(url, headers=headers, json=payload)
            if response.status_code == 200:
                data = response.json()
                operations = data.get("result", {}).get("operations", [])
                all_transactions.extend(operations)
                print(f"üîÑ {period_name}: –°—Ç—Ä–∞–Ω–∏—Ü–∞ {payload['page']} –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–ø–∏—Å–µ–π: {len(operations)}")
                if len(operations) < 1000:
                    break
                payload["page"] += 1
            else:
                print(f"‚ùå {period_name}: –û—à–∏–±–∫–∞: {response.status_code}")
                print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)
                break
    
    
        transactions_df = pd.DataFrame(all_transactions)
        print(f"‚úÖ {period_name}: –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(transactions_df)}")
    
        nachislen = transactions_df.groupby('operation_type_name', as_index=False)['amount'].sum()
    
        total_sum = nachislen['amount'].sum()
    
        total_row = pd.DataFrame([{"operation_type_name": "–û–±—â–∞—è —Å—É–º–º–∞", "amount": total_sum}])
        nachislen = pd.concat([nachislen, total_row], ignore_index=True)
    
        print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π ({period_name}):")
        print(nachislen)
    
        return transactions_df, nachislen
    
    
    def process_items(transactions_df, period_name):
    
        filtered_df = transactions_df[transactions_df['operation_type_name'] == "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
    
        if 'items' in filtered_df.columns:
            # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–ª–µ items
            items_data = filtered_df['items'].explode()
    
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (JSON) –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ DataFrame
            items_expanded = pd.json_normalize(items_data)
    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è name –∏ sku
            if 'name' in items_expanded.columns and 'sku' in items_expanded.columns:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ SKU
                result = items_expanded[['name', 'sku']].copy()
    
                # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ name –∏ sku
                consolidated_result = result.value_counts(['name', 'sku']).reset_index()
                consolidated_result.columns = ['name', 'sku', 'count']
    
                # –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                print(f"üìä –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ ({period_name}):")
                print(consolidated_result)
    
                return consolidated_result
            else:
                print(f"‚ö† {period_name}: –ü–æ–ª—è 'name' –∏–ª–∏ 'sku' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ items.")
                return pd.DataFrame()
        else:
            print(f"‚ö† {period_name}: –ü–æ–ª–µ 'items' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return pd.DataFrame()
    
    # --- –î–∞—Ç—ã –¥–ª—è –¥–≤—É—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ ---
    # –í—á–µ—Ä–∞
    yesterday = datetime.now() - timedelta(days=1)
    date_from_yesterday = yesterday.strftime("%Y-%m-%dT00:00:00.000Z")
    date_to_yesterday = yesterday.strftime("%Y-%m-%dT23:59:59.000Z")
    
    # –° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ –¥–æ –≤—á–µ—Ä–∞
    start_of_month = datetime.now().replace(day=1)
    date_from_month = start_of_month.strftime("%Y-%m-%dT00:00:00.000Z")
    date_to_today = yesterday.strftime("%Y-%m-%dT23:59:59.000Z")
    
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞...")
    transactions_yesterday, nachislen_yesterday = fetch_transactions_and_show_nachislen(
        date_from_yesterday, date_to_yesterday, "–ó–∞ –≤—á–µ—Ä–∞"
    )
    
    print("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞...")
    transactions_month, nachislen_month = fetch_transactions_and_show_nachislen(
        date_from_month, date_to_today, "–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞"
    )
    
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é" ---
    print("\nüîÑ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ items –∑–∞ –≤—á–µ—Ä–∞...")
    items_yesterday = process_items(transactions_yesterday, "–ó–∞ –≤—á–µ—Ä–∞")
    
    print("\nüîÑ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ items —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞...")
    items_month = process_items(transactions_month, "–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞")
    
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    #nachislen_yesterday.to_excel("nachislen_yesterday.xlsx", index=False)
    #nachislen_month.to_excel("nachislen_month.xlsx", index=False)
    
    #if not items_yesterday.empty:
    #    items_yesterday.to_excel("items_yesterday.xlsx", index=False)
    #    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –≤—á–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: items_yesterday.xlsx")
    
    #if not items_month.empty:
    #    items_month.to_excel("items_month.xlsx", index=False)
    #    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: items_month.xlsx")
    
    """# Ozon. –§–∏–Ω–∞–Ω—Å—ã. –ù–∞—á–∏—Å–ª–µ–Ω–∏—è. –¢–æ–≤–∞—Ä—ã.
    
    ##  –ß—Ç–æ –¥–µ–ª–∞–µ–º?
    
    –°—Ç—è–≥–∏–≤–∞–µ–º –ø–æ API –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.  
    –ë–µ—Ä—ë–º –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞:
    - **–° –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞**
    - **–ó–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å**
    
    –°–º–æ—Ç—Ä–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ **—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö**: —Å–∫–æ–ª—å–∫–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ, –∑–∞ —á—Ç–æ –∏–º–µ–Ω–Ω–æ, –∫–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –æ—Ç—á—ë—Ç–∞—Ö Ozon.
    
    ---
    
    ##  –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    ### 1. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ API
    –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ `https://api-seller.ozon.ru/v3/finance/transaction/list`  
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (`page_size = 1000`), —Ç–∞–∫ —á—Ç–æ —Å—Ç—è–≥–∏–≤–∞–µ–º –≤—Å—ë, –ø–æ–∫–∞ –Ω–µ –∫–æ–Ω—á–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫.
    
    ### 2. –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º
    –°–æ–∑–¥–∞—ë–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ `operation_type_name`.  
    –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π:
    - –î–æ—Å—Ç–∞–≤–∫–∞
    - –ö–æ–º–∏—Å—Å–∏—è
    - –í–æ–∑–≤—Ä–∞—Ç –∏ —Ç.–¥.
    
    –í –∫–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É **‚Äú–û–±—â–∞—è —Å—É–º–º–∞‚Äù**, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∏—Ç–æ–≥ –ø–æ –ø–µ—Ä–∏–æ–¥—É.
    
    ---
    
    ##  –ß—Ç–æ —Å —Ç–æ–≤–∞—Ä–∞–º–∏?
    
    –ò–∑ –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ `"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"` –¥–æ—Å—Ç–∞—ë–º –ø–æ–ª–µ `items`, –≥–¥–µ –ª–µ–∂–∞—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.  
    –î–∞–ª–µ–µ:
    1. **–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º JSON**
    2. –î–æ—Å—Ç–∞—ë–º `name` –∏ `sku`
    3. –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ
    
    –†–µ–∑—É–ª—å—Ç–∞—Ç: —É–∂–µ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ –∫–æ–º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    ---
    
    ##  –í—ã–≥—Ä—É–∑–∫–∞
    
    –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º:
    - `items_yesterday.xlsx` ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –≤—á–µ—Ä–∞
    - `items_month.xlsx` ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∑–∞ –º–µ—Å—è—Ü
    
    (–ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∂–∞—Ç—å ‚Äî —Å—Ç—Ä–æ–∫–∏ —Å `to_excel` –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é)
    
    
    ## –ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?
    
    - –í–∏–¥–∏–º, –∫–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–≥—Ä—É–∂–∞—é—Ç—Å—è
    - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É –¥–Ω—è –∏ –º–µ—Å—è—Ü–∞
    - –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –±–∞–∑—É –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑–∞ SKU, –¥–∞–ª—å—à–µ –ø–æ–¥—Ç—è–Ω–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∏–º —Ä–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –∏ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—â—É—é –ø–æ –∞–∫–∞—É–Ω—Ç—É, –ø–æ—Ç–æ–º –ø–æ–π–¥–µ–º –∫ –∫–∞–∂–¥–æ–π SKU.
    
    """
    
    if 'Ozon SKU ID' in price.columns:
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π DataFrame (items_yesterday –∏ items_month) —Å price
        final_yesterday = items_yesterday.merge(price[['Ozon SKU ID', '–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö']],
                                                left_on='sku', right_on='Ozon SKU ID',
                                                how='left')
    
        final_month = items_month.merge(price[['Ozon SKU ID', '–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö']],
                                        left_on='sku', right_on='Ozon SKU ID',
                                        how='left')
    
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏ —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        final_yesterday.rename(columns={'–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'}, inplace=True)
        final_month.rename(columns={'–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'}, inplace=True)
    
        final_yesterday = final_yesterday[['name', 'sku', 'count', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']]
        final_month = final_month[['name', 'sku', 'count', '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']]
    
        # –í—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        #print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é:")
        #print(final_yesterday)
    
        #print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é:")
        #print(final_month)
    else:
        print("‚ö† –ö–æ–ª–æ–Ω–∫–∞ 'Ozon SKU ID' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ price. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    
    """## –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
    
    –ï—Å–ª–∏ –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ (`price`) –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ `Ozon SKU ID`,  
    —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º **—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å** –∫ —Ç–∞–±–ª–∏—Ü–∞–º –ø—Ä–æ–¥–∞–∂ –∑–∞ –≤—á–µ—Ä–∞ –∏ –º–µ—Å—è—Ü.
    
    - –ò—Å–ø–æ–ª—å–∑—É–µ–º `merge()` –ø–æ `sku`
    - –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–ª–µ `–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö`
    - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –≤ `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å`
    - –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:
    –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç ‚Äî —Å–∫—Ä–∏–ø—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± —ç—Ç–æ–º.  
    –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –º–∞—Ä–∂–∏ –∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ SKU.
    """
    
    if 'count' in final_yesterday.columns and '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å' in final_yesterday.columns:
        final_yesterday['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] = final_yesterday['count'] * final_yesterday['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']
        #print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—É–º–º—ã —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
        #print(final_yesterday)
    else:
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ 'count' –∏–ª–∏ '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å' –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ –∑–∞ –≤—á–µ—Ä–∞.")
    
    if 'count' in final_month.columns and '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å' in final_month.columns:
        final_month['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] = final_month['count'] * final_month['–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å']
        #print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Å—É–º–º—ã —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
        #print(final_month)
    else:
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ 'count' –∏–ª–∏ '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å' –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞.")
    
    """## –†–∞—Å—á—ë—Ç —Å—É–º–º—ã —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏
    
    –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –∑–∞ –≤—á–µ—Ä–∞ –∏ –∑–∞ –º–µ—Å—è—Ü –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (`count` –∏ `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å`),  
    –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
    –≠—Ç–æ –¥–∞—ë—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ–±—â–µ–π –∑–∞–∫—É–ø–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.  
    –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ—Ç ‚Äî —Å–∫—Ä–∏–ø—Ç —É–≤–µ–¥–æ–º–∏—Ç.
    """
    
    if 'operation_type_name' in nachislen_yesterday.columns and 'amount' in nachislen_yesterday.columns:
        total_otgruzka_yesterday = round(
            nachislen_yesterday.loc[nachislen_yesterday['operation_type_name'] == '–û–±—â–∞—è —Å—É–º–º–∞', 'amount'].values[0], 2
        )
        total_sebestoimost_yesterday = round(final_yesterday['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'].sum(), 2)
        sebestoimost_ratio_yesterday = round((total_sebestoimost_yesterday / total_otgruzka_yesterday) * 100, 2)
        marzha_percentage_yesterday = round(100 - sebestoimost_ratio_yesterday, 2)
    
    
        print("üìä –ò—Ç–æ–≥–∏ –∑–∞ –≤—á–µ—Ä–∞:")
        print(f"–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_sebestoimost_yesterday} —Ä—É–±.")
        print(f"–û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {total_otgruzka_yesterday} —Ä—É–±.")
        print(f"–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {sebestoimost_ratio_yesterday}%")
        print(f"–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {marzha_percentage_yesterday}%")
    else:
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞.")
    
    if 'operation_type_name' in nachislen_month.columns and 'amount' in nachislen_month.columns:
    
        total_otgruzka_month = round(
            nachislen_month.loc[nachislen_month['operation_type_name'] == '–û–±—â–∞—è —Å—É–º–º–∞', 'amount'].values[0], 2
        )
        total_sebestoimost_month = round(final_month['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'].sum(), 2)
        sebestoimost_ratio_month = round((total_sebestoimost_month / total_otgruzka_month) * 100, 2)
    
        marzha_percentage_month = round(100 - sebestoimost_ratio_month, 2)
    
    
        print("\nüìä –ò—Ç–æ–≥–∏ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
        print(f"–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_sebestoimost_month} —Ä—É–±.")
        print(f"–û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {total_otgruzka_month} —Ä—É–±.")
        print(f"–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏: {sebestoimost_ratio_month}%")
        print(f"–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {marzha_percentage_month}%")
    else:
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞.")
    
    """## –†–∞—Å—á—ë—Ç –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π (`nachislen`) –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö —Å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é –µ—Å—Ç—å –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏,  
    —Å—á–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
    
    ###  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:
    - **–û–±—â–∞—è —Å—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏** ‚Äî –ø–æ —Å—Ç—Ä–æ–∫–µ `"–û–±—â–∞—è —Å—É–º–º–∞"` –≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö
    - **–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å** ‚Äî —Å—É–º–º–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–µ `"–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"` –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    - **–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏** –æ—Ç –≤—ã—Ä—É—á–∫–∏ (–≤ %)
    - **–ú–∞—Ä–∂–∞** (–≤ %), –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≤—ã—Ä—É—á–∫–æ–π –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    
    """
    
    def expand_items_with_amount(transactions_df, period_name):
    
        filtered_transactions = transactions_df[transactions_df['operation_type_name'] == "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"]
    
        items_expanded = []
        for idx, row in filtered_transactions.iterrows():
            if isinstance(row['items'], list) and len(row['items']) > 0:
                num_items = len(row['items'])
                amount_per_item = row['amount'] / num_items
                for item in row['items']:
                    item_row = {
                        'name': item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'),
                        'sku': item.get('sku', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π SKU'),
                        'amount': amount_per_item
                    }
                    items_expanded.append(item_row)
    
    
        result_table = pd.DataFrame(items_expanded)
        total_original = filtered_transactions['amount'].sum()
        total_expanded = result_table['amount'].sum()
    
        print(f"üìä {period_name}:")
        print(f"–°—É–º–º–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ DataFrame: {total_original}")
        print(f"–°—É–º–º–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤—ë—Ä—Ç–∫–∏: {total_expanded}")
    
        if total_original == total_expanded:
            print("‚úÖ –°—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç. –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è –°—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    
        return result_table
    
    # --- –†–∞–∑–≤—ë—Ä—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–≤–∞ –ø–µ—Ä–∏–æ–¥–∞ ---
    print("üîÑ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –≤—á–µ—Ä–∞...")
    expanded_yesterday = expand_items_with_amount(transactions_yesterday, "–ó–∞ –≤—á–µ—Ä–∞")
    
    print("\nüîÑ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞...")
    expanded_month = expand_items_with_amount(transactions_month, "–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞")
    
    # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    #expanded_yesterday.to_excel("expanded_yesterday.xlsx", index=False)
    #expanded_month.to_excel("expanded_month.xlsx", index=False)
    
    #print("\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    #print(" - –¢–æ–≤–∞—Ä—ã –∑–∞ –≤—á–µ—Ä–∞: expanded_yesterday.xlsx")
    #print(" - –¢–æ–≤–∞—Ä—ã —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞: expanded_month.xlsx")
    
    """## –†–∞–∑–≤—ë—Ä—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º
    
    –§—É–Ω–∫—Ü–∏—è `expand_items_with_amount()` –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è **–≥–ª—É–±–æ–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≥—Ä—É–∑–æ–∫**.  
    –ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è —Ç–æ–≤–∞—Ä,  
    –∞ **—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –æ—Ç–≥—Ä—É–∑–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É SKU**.
    
    ---
    
    ###  –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:
    
    1. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É `"–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"`
    2. –î–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏:
       - –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ `items`
       - –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –±—ã–ª–æ –≤ –æ—Ç–≥—Ä—É–∑–∫–µ
       - **–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É `amount` –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É –Ω–∏–º–∏**
    3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É, –≥–¥–µ:
    
    –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç—å—é —Å—É–º–º—ã.
    
    ---
    
    ###  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏:
    
    - –°—É–º–º–∏—Ä—É–µ–º `amount` –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    - –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å—É–º–º–æ–π –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ
    - –ï—Å–ª–∏ —Å—É–º–º—ã **—Å–æ–≤–ø–∞–¥–∞—é—Ç** ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    
    ---
    
    ###  –í—ã–≥—Ä—É–∑–∫–∞:
    - `expanded_yesterday.xlsx` ‚Äî —Ä–∞–∑–≤—ë—Ä—Ç–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
    - `expanded_month.xlsx` ‚Äî —Ä–∞–∑–≤—ë—Ä—Ç–∫–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    
    ---
    
    –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ç–æ—á–Ω–æ–π –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É SKU,  
    –≤–µ–¥—å –Ω–∞–º –Ω—É–∂–µ–Ω –æ—Ç—á—ë—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º.
    """
    
    # –ü–æ–¥—Å—á—ë—Ç NaN –≤ –∫–æ–ª–æ–Ω–∫–µ 'name'
    nan_count_yesterday = expanded_yesterday['name'].isna().sum()
    nan_count_month = expanded_month['name'].isna().sum()
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NaN –≤ –∫–æ–ª–æ–Ω–∫–µ 'name' –∑–∞ –≤—á–µ—Ä–∞: {nan_count_yesterday}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NaN –≤ –∫–æ–ª–æ–Ω–∫–µ 'name' —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞: {nan_count_month}")
    
    """##  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (NaN –≤ `name`)
    
    –ü–æ—Å–ª–µ —Ä–∞–∑–≤—ë—Ä—Ç–∫–∏ –±—ã–≤–∞–µ—Ç, —á—Ç–æ –≤ –∫–æ–ª–æ–Ω–∫–µ `name` –ø–æ–ø–∞–¥–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.  
    –≠—Ç–æ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ:
    - –í `items` –ø—Ä–∏—à—ë–ª —Ç–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    - –õ–∏–±–æ –ø–æ–ª–µ `name` –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ API
    
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ:
    - –ó–∞ –≤—á–µ—Ä–∞
    - –° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    
    –í—ã–≤–æ–¥–∏–º:
     –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã **–Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—Ç—á—ë—Ç–∞—Ö** –∏ –ø–æ–Ω–∏–º–∞—Ç—å, –≥–¥–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ SKU).
    """
    
    aggregated_yesterday = expanded_yesterday.groupby('name', as_index=False).agg({'amount': 'sum'})
    aggregated_yesterday = aggregated_yesterday.sort_values(by='amount', ascending=False)
    
    aggregated_month = expanded_month.groupby('name', as_index=False).agg({'amount': 'sum'})
    aggregated_month = aggregated_month.sort_values(by='amount', ascending=False)
    total_amount_yesterday = aggregated_yesterday['amount'].sum()
    total_amount_month = aggregated_month['amount'].sum()
    print("üìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞:")
    print(aggregated_yesterday.head())
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –≤—á–µ—Ä–∞: {total_amount_yesterday}")
    
    print("\nüìä –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
    print(aggregated_month.head())
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞: {total_amount_month}")
    
    """## –ê–≥—Ä–µ–≥–∞—Ü–∏—è –≤—ã—Ä—É—á–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    
    –ü–æ—Å–ª–µ —Ä–∞–∑–≤—ë—Ä—Ç–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º—ã –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ `name`,  
    —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **–∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É**.
    
    ### –ß—Ç–æ –¥–µ–ª–∞–µ–º:
    - –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ `name`, —Å—É–º–º–∏—Ä—É–µ–º `amount`
    - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã (—Ç–æ–ø –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–≤–µ—Ä—Ö—É)
    - –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é –≤—ã—Ä—É—á–∫—É –∑–∞:
      - –í—á–µ—Ä–∞
      - –° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    """
    
    expanded_yesterday['–°—É–º–º–∞ –ø–æ name'] = expanded_yesterday.groupby('name')['amount'].transform('sum')
    expanded_yesterday['–û–±—â–∞—è —Å—É–º–º–∞ amount'] = expanded_yesterday['amount'].sum()
    
    expanded_month['–°—É–º–º–∞ –ø–æ name'] = expanded_month.groupby('name')['amount'].transform('sum')
    expanded_month['–û–±—â–∞—è —Å—É–º–º–∞ amount'] = expanded_month['amount'].sum()
    
    total_amount_yesterday = expanded_yesterday['amount'].sum()
    total_amount_month = expanded_month['amount'].sum()
    
    print("üìä –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞:")
    print(expanded_yesterday.head())
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –≤—á–µ—Ä–∞: {total_amount_yesterday}")
    
    print("\nüìä –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
    print(expanded_month.head())
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞: {total_amount_month}")
    
    """## –†–∞—Å—á—ë—Ç –¥–æ–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
    
    –î–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–Ω—É—Ç—Ä–∏ `expanded_*`,  
    –¥–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞:
    
    ### –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (`–≤—á–µ—Ä–∞` –∏ `–º–µ—Å—è—Ü`):
    
    - **–°—É–º–º–∞ –ø–æ name** ‚Äî –æ–±—â–∞—è —Å—É–º–º–∞ `amount`, –ø—Ä–∏—Ö–æ–¥—è—â–∞—è—Å—è –Ω–∞ –∫–∞–∂–¥—ã–π `name`  
      _(–∏—Å–ø–æ–ª—å–∑—É–µ–º `groupby().transform('sum')` ‚Äî —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç—Ä–æ—á–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é)_
    
    - **–û–±—â–∞—è —Å—É–º–º–∞ amount** ‚Äî –µ–¥–∏–Ω–∞—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º—É –ø–µ—Ä–∏–æ–¥—É, –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ  
      _(—ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —Å—á–∏—Ç–∞—Ç—å –¥–æ–ª—é —Å—Ç—Ä–æ–∫–∏ –æ—Ç –æ–±—â–µ–≥–æ –æ–±–æ—Ä–æ—Ç–∞)_
    
    –í—ã–≤–æ–¥–∏–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: `head()` + –æ–±—â–∞—è —Å—É–º–º–∞
    """
    
    # --- –†–∞—Å—á—ë—Ç—ã –¥–ª—è –≤—á–µ—Ä–∞ ---
    final_yesterday = final_yesterday.merge(aggregated_yesterday[['name', 'amount']], on='name', how='left')
    final_yesterday['–ü—Ä–∏–±—ã–ª—å'] = final_yesterday['amount'] - final_yesterday['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏']
    final_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = (final_yesterday['–ü—Ä–∏–±—ã–ª—å'] / final_yesterday['amount']) * 100
    
    –æ–±—â–∞—è_—Å—É–º–º–∞_–ø—Ä–æ–¥–∞–∂_yesterday = final_yesterday['amount'].sum()
    final_yesterday['–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)'] = (final_yesterday['amount'] / –æ–±—â–∞—è_—Å—É–º–º–∞_–ø—Ä–æ–¥–∞–∂_yesterday) * 100
    
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    final_yesterday['–ü—Ä–∏–±—ã–ª—å'] = final_yesterday['–ü—Ä–∏–±—ã–ª—å'].round(0)
    final_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = final_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'].round(2)
    final_yesterday['–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)'] = final_yesterday['–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)'].round(2)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    final_yesterday = final_yesterday.sort_values(by='amount', ascending=False).reset_index(drop=True)
    
    # --- –†–∞—Å—á—ë—Ç—ã –¥–ª—è –º–µ—Å—è—Ü–∞ ---
    final_month = final_month.merge(aggregated_month[['name', 'amount']], on='name', how='left')
    final_month['–ü—Ä–∏–±—ã–ª—å'] = final_month['amount'] - final_month['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏']
    final_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = (final_month['–ü—Ä–∏–±—ã–ª—å'] / final_month['amount']) * 100
    
    –æ–±—â–∞—è_—Å—É–º–º–∞_–ø—Ä–æ–¥–∞–∂_month = final_month['amount'].sum()
    final_month['–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)'] = (final_month['amount'] / –æ–±—â–∞—è_—Å—É–º–º–∞_–ø—Ä–æ–¥–∞–∂_month) * 100
    
    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    final_month['–ü—Ä–∏–±—ã–ª—å'] = final_month['–ü—Ä–∏–±—ã–ª—å'].round(0)
    final_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = final_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'].round(2)
    final_month['–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)'] = final_month['–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)'].round(2)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    final_month = final_month.sort_values(by='amount', ascending=False).reset_index(drop=True)
    
    # --- –í—ã–≤–æ–¥ ---
    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞:")
    print(final_yesterday.head())
    
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
    print(final_month.head())
    
    """## –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã –ø–æ –ø—Ä–∏–±—ã–ª–∏ –∏ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–≥—Ä—É–∑–∫–∞–º –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏,  
    —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **–ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É**.
    
    ---
    
    ### –ß—Ç–æ —Å—á–∏—Ç–∞–µ–º:
    
    - `–ü—Ä–∏–±—ã–ª—å`  
    - `–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)`
    - `–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)`
    
    –í—Å—ë —ç—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ:
    - –î–ª—è **–≤—á–µ—Ä–∞**
    - –î–ª—è **–Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞**
    
    ---
    
    ### –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:
    
    - –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è (`–ü—Ä–∏–±—ã–ª—å` –¥–æ —Ü–µ–ª–æ–≥–æ, –ø—Ä–æ—Ü–µ–Ω—Ç—ã ‚Äî –¥–æ —Å–æ—Ç—ã—Ö)
    - –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ (`amount`) –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
    - –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏: ame | sku | count | –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å | amount | –ü—Ä–∏–±—ã–ª—å | –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%) | –î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%) –≠—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç: –ø–æ –Ω–µ–º—É –≤–∏–¥–Ω–æ –≤—Å—ë ‚Äî –æ—Ç –æ–±–æ—Ä–æ—Ç–∞ –¥–æ –ø—Ä–∏–±—ã–ª–∏ –ø–æ SKU.
    
    ## –ù–∞ —ç—Ç–æ–º –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è. –ù–æ –º–æ–∂–Ω–æ –ø–æ–π—Ç–∏ –¥–∞–ª—å—à–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫–∞–∂–¥–æ–º—É SKU –î–†–†(–¥–æ–ª—é —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤).##
    
     –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–¥–µ—Ç—Å—è –∞–≤—Ç–æ–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –û–∑–æ–Ω –ü–µ—Ä—Ñ–æ–º–∞–Ω—Å —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–æ—Ñ–∞—Ä–∞—Ü–∏—é. –ê —Ç–∞–∫–∂–µ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∑–∞–≤–æ–¥–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
    
    1. –û–¥–Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è - 1 SKU
    
    2. –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏ = –Ω–∞–∑–≤–∞–Ω–∏–µ SKU —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–µ—Ö–∏—Ç—Ä—ã–º —Å–ø–æ—Å–æ–±–æ–º –∫ —ç—Ç–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é "–≤—è–∑–∞—Ç—å—Å—è".
    """
    
    url_token = "https://api-performance.ozon.ru/api/client/token"
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    payload = {
        "client_id": perf_client_id,
        "client_secret": perf_key,
        "grant_type": "client_credentials"
    }
    
    response = requests.post(url_token, headers=headers, json=payload)
    if response.status_code == 200:
        access_token = response.json()["access_token"]
        print(f"–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {access_token}")
    else:
        print("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", response.status_code)
        print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)
    
    """## –ü–æ–ª—É—á–µ–Ω–∏–µ access token –¥–ª—è Ozon Performance API
    
    –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∫–ª–∞–º–Ω–æ–º—É API Ozon Performance (performance.ozon.ru),  
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É OAuth 2.0 (`client_credentials`).
    
    ### –®–∞–≥–∏:
    1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ `https://api-performance.ozon.ru/api/client/token`
    2. –í `payload` –ø–µ—Ä–µ–¥–∞—ë–º:
       - `client_id`
       - `client_secret`
       - `grant_type = "client_credentials"`
    3. –í –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞–µ–º `access_token`, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.
    
    –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –•—Ä–∞–Ω–∏–º –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π `access_token` –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    
    yesterday = datetime.now() - timedelta(days=1)
    date_from_yesterday = yesterday.strftime("%Y-%m-%dT00:00:00Z")
    date_to_yesterday = yesterday.strftime("%Y-%m-%dT23:59:59Z")
    
    start_of_month = datetime.now().replace(day=1)
    date_from_month = start_of_month.strftime("%Y-%m-%dT00:00:00Z")
    date_to_today = yesterday.strftime("%Y-%m-%dT23:59:59Z")
    
    
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    
    url_report = "https://api-performance.ozon.ru/api/client/statistics/campaign/product/json"
    
    
    def fetch_report(start_date, end_date, period_name):
        payload = {
            "from": start_date,
            "to": end_date
        }
    
        response = requests.get(url_report, headers=headers, params=payload)
    
        if response.status_code == 200:
            print(f"‚úÖ {period_name}: –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!")
            return response.json()
        else:
            print(f"‚ùå {period_name}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", response.status_code)
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)
            return None
    print("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—á–µ—Ä–∞...")
    report_yesterday = fetch_report(date_from_yesterday, date_to_yesterday, "–ó–∞ –≤—á–µ—Ä–∞")
    
    print("\nüîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞...")
    report_month = fetch_report(date_from_month, date_to_today, "–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞")
    if report_yesterday:
        print("\nüìä –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞:")
        #print(report_yesterday)
    
    if report_month:
        print("\nüìä –î–∞–Ω–Ω—ã–µ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
        #print(report_month)
    
    """## –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —Ä–µ–∫–ª–∞–º–µ Ozon Performance
    
    –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–º —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–º–ø–∞–Ω–∏—è–º —á–µ—Ä–µ–∑ Ozon Performance API.
    
    ---
    
    ### –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π `access_token`, –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ:
    ---
    
    ### ‚è±–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –ø–µ—Ä–∏–æ–¥—ã:
    - **–ó–∞ –≤—á–µ—Ä–∞**
    - **–° –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ –¥–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è**
    
    –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ISO 8601 (`%Y-%m-%dT%H:%M:%SZ`)
    –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ```json
    {
      "from": "2024-04-07T00:00:00Z",
      "to":   "2024-04-07T23:59:59Z"
    }
    """
    
    # === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ ===
    if report_yesterday:
        df_yesterday = pd.DataFrame(report_yesterday.get('rows', []))
        df_filtered_yesterday = df_yesterday[df_yesterday['status'] == 'running']
        df_filtered_yesterday['moneySpent'] = pd.to_numeric(df_filtered_yesterday['moneySpent'], errors='coerce').fillna(0).round(0).astype(int)
        df_money_spent_yesterday = df_filtered_yesterday[['title', 'moneySpent']].rename(columns={'title': 'name', 'moneySpent': '–î–†–†'})
    
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å final_result –∑–∞ –≤—á–µ—Ä–∞
        final_result_yesterday = final_yesterday.merge(df_money_spent_yesterday, on='name', how='left')
        final_result_yesterday['–î–†–†'] = final_result_yesterday['–î–†–†'].fillna(0).astype(int)
        #print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –î–†–†:")
        #print(final_result_yesterday.head())
    
    if report_month:
        df_month = pd.DataFrame(report_month.get('rows', []))
        df_filtered_month = df_month[df_month['status'] == 'running']
        df_filtered_month['moneySpent'] = pd.to_numeric(df_filtered_month['moneySpent'], errors='coerce').fillna(0).round(0).astype(int)
        df_money_spent_month = df_filtered_month[['title', 'moneySpent']].rename(columns={'title': 'name', 'moneySpent': '–î–†–†'})
    
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å final_result –∑–∞ –º–µ—Å—è—Ü
        final_result_month = final_month.merge(df_money_spent_month, on='name', how='left')
        final_result_month['–î–†–†'] = final_result_month['–î–†–†'].fillna(0).astype(int)
        #print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ —Å —É—á–µ—Ç–æ–º –î–†–†:")
        #print(final_result_month.head())
    
    """## –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (–î–†–†) –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    
    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –∏–∑ Ozon Performance API,  
    –º—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ (`status == "running"`),  
    –∏ –¥–æ—Å—Ç–∞—ë–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
    
    - `title` ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å `name` –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö)
    - `moneySpent` ‚Äî —Å—É–º–º–∞ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–∞—è –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    
    ---
    
    ###  –ß—Ç–æ –¥–µ–ª–∞–µ–º:
    
    1. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-–æ—Ç–≤–µ—Ç –≤ `DataFrame`
    2. –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (`status == "running"`)
    3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `moneySpent` –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∏ –æ–∫—Ä—É–≥–ª—è–µ–º
    4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å: name | –î–†–†
    5. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å `final_yesterday` –∏ `final_month` –ø–æ `name`
    6. –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–ª—è–º–∏ (`fillna(0)`)
    
    ---
    
    ### –†–µ–∑—É–ª—å—Ç–∞—Ç:
    
    –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞ –≤—á–µ—Ä–∞ –∏ –º–µ—Å—è—Ü —Å —É—á—ë—Ç–æ–º –î–†–†:
    name | sku | count | amount | –ü—Ä–∏–±—ã–ª—å | –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%) | –î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%) | –î–†–†
    """
    
    # --- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã ---
    final_result_yesterday.rename(columns={
        'amount': '–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏',
        'cost': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'
    }, inplace=True)
    
    final_result_month.rename(columns={
        'amount': '–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏',
        'cost': '–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å'
    }, inplace=True)
    
    # --- –†–∞—Å—á–µ—Ç –î–†–† –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö ---
    final_result_yesterday['–î–†–† (%)'] = (
        (final_result_yesterday['–î–†–†'] / final_result_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100)
        .fillna(0).round(2)
    )
    
    final_result_month['–î–†–† (%)'] = (
        (final_result_month['–î–†–†'] / final_result_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100)
        .fillna(0).round(2)
    )
    
    
    final_result_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –î–†–†'] = (
        (final_result_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] -
         final_result_yesterday['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] -
         final_result_yesterday['–î–†–†']) /
        final_result_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
    ).fillna(0).round(2)
    
    final_result_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –î–†–†'] = (
        (final_result_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] -
         final_result_month['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] -
         final_result_month['–î–†–†']) /
        final_result_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
    ).fillna(0).round(2)
    
    excel_filename_yesterday = "final_result_yesterday_with_calculations.xlsx"
    excel_filename_month = "final_result_month_with_calculations.xlsx"
    
    final_result_yesterday.to_excel(excel_filename_yesterday, index=False)
    final_result_month.to_excel(excel_filename_month, index=False)
    
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {excel_filename_yesterday}")
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ —Å —Ä–∞—Å—á–µ—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {excel_filename_month}")
    
    # --- –í—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞:")
    print(final_result_yesterday.head(10))
    
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
    print(final_result_month.head(10))
    
    """## –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø: —Ä–∞—Å—á—ë—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç
    
    –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–∞—Å—á—ë—Ç—ã –ø–æ —Ä–µ–∫–ª–∞–º–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ Excel.
    
    ---
    
    ###  –ß—Ç–æ —Å—á–∏—Ç–∞–µ–º:
    
    #### –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫:
    - `amount` ‚Üí `–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏`
    - `cost` ‚Üí `–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å`
    
    ####  –†–∞—Å—á—ë—Ç—ã:
    
    - **–î–†–† (%)** ‚Äî –¥–æ–ª—è —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ç –≤—ã—Ä—É—á–∫–∏
    - **–ú–∞—Ä–∂–∞ —Å —É—á–µ—Ç–æ–º –î–†–† (%)** ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
    #### –≠–∫—Å–ø–æ—Ä—Ç:
    –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Excel:
    - `final_result_yesterday_with_calculations.xlsx`
    - `final_result_month_with_calculations.xlsx`
    
    ---
    
    ### –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:name | sku | count | –°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ | –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å | –ü—Ä–∏–±—ã–ª—å | –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%) | –î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%) | –î–†–† | –î–†–† (%) | –ú–∞—Ä–∂–∞ —Å —É—á–µ—Ç–æ–º –î–†–†
    
    
    """
    
    cols_to_round = [
        '–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏',
        '–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏',
        '–ü—Ä–∏–±—ã–ª—å',
        '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)',
        '–î–æ–ª—è –ø—Ä–æ–¥–∞–∂ (%)',
        '–î–†–† (%)',
        '–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –î–†–†'
    ]
    final_result_month[cols_to_round] = final_result_month[cols_to_round].astype(float).round(2)
    final_result_yesterday[cols_to_round] = final_result_yesterday[cols_to_round].astype(float).round(2)
    
    final_result_month.head(100)
    
    final_result_yesterday.head(50)
    
    items_yesterday.head()
    
    #file_name = 'final_result_yesterday.xlsx'
    #final_result_yesterday.to_excel(file_name, index=False)
    #files.download(file_name)
    
    nachislen_yesterday.head(20)
    
    nachislen_month.head(25)
    
    #nachislen_yesterday.to_excel("nachislen_yesterday.xlsx", index=False)
    #nachislen_month.to_excel("nachislen_month.xlsx", index=False)
    
    def prepare_pie_data(df):
        df_filtered = df[(df['operation_type_name'] != '–û–±—â–∞—è —Å—É–º–º–∞') & (df['amount'] < 0)].copy()
        df_filtered['amount'] = df_filtered['amount'].abs()
        return df_filtered
    
    pie_yesterday = prepare_pie_data(nachislen_yesterday)
    pie_month = prepare_pie_data(nachislen_month)
    
    def plot_pie(df, title):
        df_sorted = df.sort_values(by='amount', ascending=False)
        labels = df_sorted['operation_type_name']
        values = df_sorted['amount']
    
    
        if len(df_sorted) > 10:
            labels = list(labels[:9]) + ['–ü—Ä–æ—á–µ–µ']
            values = list(values[:9]) + [sum(values[9:])]
    
    
        colors = plt.get_cmap('Set3').colors
    
        plt.figure(figsize=(12, 12))
        plt.pie(values, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors)
        plt.title(title)
        plt.axis('equal')
        plt.tight_layout()
        plt.show()
    
    plot_pie(pie_yesterday, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –∑–∞ –≤—á–µ—Ä–∞")
    plot_pie(pie_month,  "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞")
    
    price.columns
    
    final_result_yesterday = final_result_yesterday.merge(price[['Ozon SKU ID', '–¢–∏–ø']],
                                                          left_on='sku', right_on='Ozon SKU ID',
                                                          how='left')
    
    final_result_month = final_result_month.merge(price[['Ozon SKU ID', '–¢–∏–ø']],
                                                  left_on='sku', right_on='Ozon SKU ID',
                                                  how='left')
    
    
    def aggregate_by_type(df, period_name):
        if '–¢–∏–ø' not in df.columns:
            print(f"‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ '–¢–∏–ø' –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {period_name}.")
            return pd.DataFrame()
    
        grouped = df.groupby('–¢–∏–ø', as_index=False).agg({
            '–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏': 'sum',
            '–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏': 'sum',
            '–î–†–†': 'sum'
        })
    
        grouped['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = (
            (grouped['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - grouped['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏']) / grouped['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
        ).round(2)
    
        grouped['–ú–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –î–†–† (%)'] = (
            (grouped['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - grouped['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] - grouped['–î–†–†']) / grouped['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
        ).round(2)
    
        print(f"\nüìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º ({period_name}):")
        print(grouped)
    
        return grouped
    
    # –í—ã–∑—ã–≤–∞–µ–º
    grouped_by_type_yesterday = aggregate_by_type(final_result_yesterday, "–∑–∞ –≤—á–µ—Ä–∞")
    grouped_by_type_month = aggregate_by_type(final_result_month, "—Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞")
    
    grouped_by_type_yesterday.head()
    
    df = grouped_by_type_yesterday.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=True)
    
    plt.figure(figsize=(10, 6))
    bars = plt.barh(df['–¢–∏–ø'], df['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], color='cornflowerblue')
    
    for bar in bars:
        width = bar.get_width()
        plt.text(width + 1000, bar.get_y() + bar.get_height()/2,
                 f'{width:,.0f}', va='center')
    
    plt.xlabel('–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (‚ÇΩ)')
    plt.title('–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)')
    plt.grid(axis='x', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()
    
    df = grouped_by_type_yesterday.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=True)
    
    fig, ax = plt.subplots(figsize=(10, 6))
    
    ax.barh(df['–¢–∏–ø'], df['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], color='cornflowerblue', label='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')
    
    df['–ü—Ä–∏–±—ã–ª—å'] = df['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - df['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] - df['–î–†–†']
    ax.barh(df['–¢–∏–ø'], df['–ü—Ä–∏–±—ã–ª—å'], color='red', label='–ü—Ä–∏–±—ã–ª—å')
    
    for i, (y, profit) in enumerate(zip(df['–¢–∏–ø'], df['–ü—Ä–∏–±—ã–ª—å'])):
        ax.text(profit + 1000, i, f'{profit:,.0f}', va='center', fontsize=8)
    
    ax.set_xlabel('‚ÇΩ')
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)')
    ax.grid(axis='x', linestyle='--', alpha=0.5)
    ax.legend()
    plt.tight_layout()
    plt.show()
    
    df = grouped_by_type_yesterday.copy()
    df['–ü—Ä–∏–±—ã–ª—å'] = df['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - df['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] - df['–î–†–†']
    
    x = np.arange(len(df['–¢–∏–ø']))
    width = 0.35
    
    fig, ax = plt.subplots(figsize=(10, 6))
    bars1 = ax.bar(x - width/2, df['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], width, label='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', color='#4C72B0')
    bars2 = ax.bar(x + width/2, df['–ü—Ä–∏–±—ã–ª—å'], width, label='–ü—Ä–∏–±—ã–ª—å', color='#DD8452')
    
    ax.set_ylabel('‚ÇΩ')
    ax.set_title('–û—Ç–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)')
    ax.set_xticks(x)
    ax.set_xticklabels(df['–¢–∏–ø'], rotation=45)
    ax.legend()
    ax.grid(axis='y', linestyle='--', alpha=0.3)
    plt.tight_layout()
    plt.show()
    
    df_sku = final_result_yesterday.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=False).head(20)
    
    plt.figure(figsize=(15, 6))
    bars = plt.bar(df_sku['name'], df_sku['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], color='skyblue')
    
    for bar in bars:
        plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2000,
                 f'{bar.get_height():,.0f} ‚ÇΩ', ha='center', va='bottom', fontsize=8)
    
    plt.xticks(rotation=75, ha='right')
    plt.ylabel('‚ÇΩ')
    plt.title('–¢–æ–ø-15 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—É–º–º–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–∑–∞ –≤—á–µ—Ä–∞)')
    plt.grid(axis='y', linestyle='--', alpha=0.3)
    plt.tight_layout()
    plt.show()

    # –§—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ calculate_all ‚Äî –±–ª–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤

# –ì—Ä–∞—Ñ–∏–∫ 1: –°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)
    df1 = grouped_by_type_yesterday.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=True)
    fig1, ax1 = plt.subplots(figsize=(10, 6))
    bars = ax1.barh(df1['–¢–∏–ø'], df1['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], color='cornflowerblue')
    for bar in bars:
        width = bar.get_width()
        ax1.text(width + 1000, bar.get_y() + bar.get_height()/2, f'{width:,.0f}', va='center')
    ax1.set_xlabel('–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ (‚ÇΩ)')
    ax1.set_title('–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)')
    ax1.grid(axis='x', linestyle='--', alpha=0.5)
    plt.subplots_adjust(left=0.3, bottom=0.2)
    plt.tight_layout()

# –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—É–º–º—ã –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏ (–∑–∞ –≤—á–µ—Ä–∞)
    df2 = df1.copy()
    df2['–ü—Ä–∏–±—ã–ª—å'] = df2['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - df2['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] - df2['–î–†–†']
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    ax2.barh(df2['–¢–∏–ø'], df2['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], color='cornflowerblue', label='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')
    ax2.barh(df2['–¢–∏–ø'], df2['–ü—Ä–∏–±—ã–ª—å'], color='red', label='–ü—Ä–∏–±—ã–ª—å')
    for i, (y, profit) in enumerate(zip(df2['–¢–∏–ø'], df2['–ü—Ä–∏–±—ã–ª—å'])):
        ax2.text(profit + 1000, i, f'{profit:,.0f}', va='center', fontsize=8)
    ax2.set_xlabel('‚ÇΩ')
    ax2.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)')
    ax2.grid(axis='x', linestyle='--', alpha=0.5)
    ax2.legend()
    plt.tight_layout()

# –ì—Ä–∞—Ñ–∏–∫ 3: –°—Ç–æ–ª–±–∏–∫–∏ —Ä—è–¥–æ–º ‚Äî –æ—Ç–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å
    x = np.arange(len(df2['–¢–∏–ø']))
    width = 0.35
    fig3, ax3 = plt.subplots(figsize=(10, 6))
    bars1 = ax3.bar(x - width/2, df2['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], width, label='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', color='#4C72B0')
    bars2 = ax3.bar(x + width/2, df2['–ü—Ä–∏–±—ã–ª—å'], width, label='–ü—Ä–∏–±—ã–ª—å', color='#DD8452')
    ax3.set_ylabel('‚ÇΩ')
    ax3.set_title('–û—Ç–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–±—ã–ª—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ –≤—á–µ—Ä–∞)')
    ax3.set_xticks(x)
    ax3.set_xticklabels(df2['–¢–∏–ø'], rotation=45)
    ax3.legend()
    ax3.grid(axis='y', linestyle='--', alpha=0.3)
    plt.tight_layout()

# –ì—Ä–∞—Ñ–∏–∫ 4: –¢–æ–ø-15 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ—Ç–≥—Ä—É–∑–∫–µ
    df_sku = final_result_yesterday.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=False).head(15)
    fig4, ax4 = plt.subplots(figsize=(15, 6))
    bars = ax4.bar(df_sku['name'], df_sku['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], color='skyblue')
    for bar in bars:
        ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 2000,
             f'{bar.get_height():,.0f} ‚ÇΩ', ha='center', va='bottom', fontsize=8)
    ax4.set_ylabel('‚ÇΩ')
    ax4.set_title('–¢–æ–ø-15 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—É–º–º–µ –æ—Ç–≥—Ä—É–∑–∫–∏ (–∑–∞ –≤—á–µ—Ä–∞)')
    ax4.set_xticklabels(df_sku['name'], rotation=75, ha='right')
    ax4.grid(axis='y', linestyle='--', alpha=0.3)
    plt.tight_layout()

# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ results

    low_margin_yesterday = final_result_yesterday[final_result_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] < 20]
    low_margin_month = final_result_month[final_result_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] < 20]
    high_drr_yesterday = final_result_yesterday[
        (final_result_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] >= 20) &
        (final_result_yesterday['–î–†–† (%)'] > 15)
    ]
    high_drr_month = final_result_month[
        (final_result_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] >= 20) &
        (final_result_month['–î–†–† (%)'] > 15)
    ]
    category_profit_yesterday = final_result_yesterday.groupby('–¢–∏–ø', as_index=False).agg({
        '–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏': 'sum',
        '–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏': 'sum',
        '–î–†–†': 'sum'
    })
    category_profit_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = (
        (category_profit_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - category_profit_yesterday['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏']) /
        category_profit_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
    ).round(2)
    category_profit_yesterday['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –î–†–† (%)'] = (
        (category_profit_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - category_profit_yesterday['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] - category_profit_yesterday['–î–†–†']) /
        category_profit_yesterday['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
    ).round(2)
    top_categories_yesterday = category_profit_yesterday.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=False).head(5)
    category_profit_month = final_result_month.groupby('–¢–∏–ø', as_index=False).agg({
        '–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏': 'sum',
        '–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏': 'sum',
        '–î–†–†': 'sum'
    })
    category_profit_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (%)'] = (
        (category_profit_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - category_profit_month['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏']) /
        category_profit_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
    ).round(2)
    category_profit_month['–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –î–†–† (%)'] = (
        (category_profit_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] - category_profit_month['–°—É–º–º–∞ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏'] - category_profit_month['–î–†–†']) /
        category_profit_month['–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] * 100
    ).round(2)
    top_categories_month = category_profit_month.sort_values(by='–°—É–º–º–∞ –æ—Ç–≥—Ä—É–∑–∫–∏', ascending=False).head(5)
    
    
    buffer_account = io.BytesIO()
    buffer_sku = io.BytesIO()

    with pd.ExcelWriter(buffer_account, engine="xlsxwriter") as writer:
        nachislen_yesterday.to_excel(writer, sheet_name="–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –≤—á–µ—Ä–∞", index=False)
        nachislen_month.to_excel(writer, sheet_name="–ù–∞—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Å—è—Ü", index=False)
        pd.DataFrame([{
            "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": total_sebestoimost_yesterday,
            "–û—Ç–≥—Ä—É–∑–∫–∞": total_otgruzka_yesterday,
            "–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏": sebestoimost_ratio_yesterday,
            "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å": marzha_percentage_yesterday
        }]).to_excel(writer, sheet_name="–ò—Ç–æ–≥–∏ –≤—á–µ—Ä–∞", index=False)
        pd.DataFrame([{
            "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": total_sebestoimost_month,
            "–û—Ç–≥—Ä—É–∑–∫–∞": total_otgruzka_month,
            "–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏": sebestoimost_ratio_month,
            "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å": marzha_percentage_month
        }]).to_excel(writer, sheet_name="–ò—Ç–æ–≥–∏ –º–µ—Å—è—Ü", index=False)

    with pd.ExcelWriter(buffer_sku, engine="xlsxwriter") as writer:
        final_result_yesterday.to_excel(writer, sheet_name="SKU –≤—á–µ—Ä–∞", index=False)
        final_result_month.to_excel(writer, sheet_name="SKU –º–µ—Å—è—Ü", index=False)

    buffer_insights = io.BytesIO()

    with pd.ExcelWriter(buffer_insights, engine="xlsxwriter") as writer:
        low_margin_yesterday.to_excel(writer, sheet_name="–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å <20% –≤—á–µ—Ä–∞", index=False)
        high_drr_yesterday.to_excel(writer, sheet_name="–í—ã—Å–æ–∫–∞—è –î–†–† –≤—á–µ—Ä–∞", index=False)
        top_categories_yesterday.to_excel(writer, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—á–µ—Ä–∞", index=False)

        low_margin_month.to_excel(writer, sheet_name="–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å <20% –º–µ—Å—è—Ü", index=False)
        high_drr_month.to_excel(writer, sheet_name="–í—ã—Å–æ–∫–∞—è –î–†–† –º–µ—Å—è—Ü", index=False)
        top_categories_month.to_excel(writer, sheet_name="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—è—Ü", index=False)

    
    return {
    "üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞": nachislen_yesterday,
    "üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞": nachislen_month,
    "üìä –ò—Ç–æ–≥–∏ (–≤—á–µ—Ä–∞)": {
        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": total_sebestoimost_yesterday,
        "–û—Ç–≥—Ä—É–∑–∫–∞": total_otgruzka_yesterday,
        "–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏": sebestoimost_ratio_yesterday,
        "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å": marzha_percentage_yesterday
    },
    "üìä –ò—Ç–æ–≥–∏ (–º–µ—Å—è—Ü)": {
        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": total_sebestoimost_month,
        "–û—Ç–≥—Ä—É–∑–∫–∞": total_otgruzka_month,
        "–î–æ–ª—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏": sebestoimost_ratio_month,
        "–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å": marzha_percentage_month
    },
    "üì¶ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –≤—á–µ—Ä–∞": final_result_yesterday,
    "üì¶ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –º–µ—Å—è—Ü": final_result_month,

    "üìà –ì—Ä–∞—Ñ–∏–∫: –û—Ç–≥—Ä—É–∑–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤—á–µ—Ä–∞)": fig1,
    "üìà –ì—Ä–∞—Ñ–∏–∫: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–∏–±—ã–ª–∏": fig2,
    "üìà –ì—Ä–∞—Ñ–∏–∫: –û—Ç–≥—Ä—É–∑–∫–∞ vs –ü—Ä–∏–±—ã–ª—å (—Å—Ç–æ–ª–±–∏–∫–∏)": fig3,
    "üìà –ì—Ä–∞—Ñ–∏–∫: –¢–æ–ø-15 SKU –ø–æ –æ—Ç–≥—Ä—É–∑–∫–µ": fig4,
    "buffer_account": buffer_account,
    "buffer_sku": buffer_sku,
    "buffer_insights": buffer_insights
}
